version: '3.8'

services:

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/
    networks:
      - spring-boot
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 123456


  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    networks:
      - rmoff_kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka
    networks:
      - rmoff_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: sh -c "((sleep 15 && kafka-topics --create --topic kafka-log-topic --bootstrap-server localhost:9092)&) && /etc/confluent/docker/run"


#  zookeeper:
##    image: confluentinc/cp-zookeeper:latest
#    image: wurstmeister/zookeeper:latest
#    container_name: zookeeper
#    networks:
#        - spring-boot
#    environment:
#      ZOOKEEPER_SERVER_ID: 1
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "22181:2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    networks:
#        - spring-boot
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # topic will be created when a value is published to the broker
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
##      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
##      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#
#      #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
##      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
##      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#    command: sh -c "((sleep 15 && kafka-topics --create --topic kafka-log-topic --bootstrap-server localhost:9092)&) && /etc/confluent/docker/run"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    networks:
        - spring-boot
        - rmoff_kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./initialize-mongo.js:/docker-entrypoint-initdb.d/01_initialize-mongo.js:ro
    networks:
      - spring-boot
  #    healthcheck:
  #      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]


  kredinbizde-discovery:
    image: kredinbizde-discovery:latest
    build:
      context: ./kredinbizde-discovery-main
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - spring-boot
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 5s
      retries: 3
      timeout: 2s

  gateway-service-main:
    image: gateway-service-main:latest
    build:
      context: ./gateway-service-main
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - spring-boot
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka

  garanti-service-main:
    image: garanti-service-main:latest
    build:
      context: ./garanti-service-main
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    networks:
      - spring-boot
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka

  akbank-service-main:
    image: akbank-service-main:latest
    build:
      context: ./akbank-service-main
      dockerfile: Dockerfile
    ports:
      - "5556:5556"
    networks:
      - spring-boot
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
  
  user-service-main:
    image: user-service-main:latest
    build:
      context: ./user-service-main
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - spring-boot
      - rmoff_kafka
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092


  #  application-service-main:
  #    image: application-service-main
  #    build:
  #      context: ./application-service-main
  #      dockerfile: Dockerfile
  #    ports:
  #      - "8082:8082"
  #    networks:
  #      - spring-boot
  #    depends_on:
  #      kredinbizde-discovery:
  #        condition: service_healthy
  #    environment:
  #      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
  
  logconsumer-service-main:
    image: logconsumer-service-main
    build:
      context: ./logconsumer-service-main
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - spring-boot
      - rmoff_kafka
    depends_on:
      - mongodb
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  #    environment:
  #        - KAFKA_SERVER_URL=kafka:9092
  #        - MONGO_SERVER=mongodb
  #        - MONGO_PORT=27017
  #        - MONGO_DB_NAME=error-logs
  #        - MONGO_DB_USERNAME=log-consumer
  #        - MONGO_DB_PASSWORD=example
  #      mongodb:
  #        condition: service_healthy
  #      kafka:
  #        condition: service_healthy


  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - spring-boot

volumes:
  mongodb_data:
  mysql_data:
networks:
  rmoff_kafka:
    name: rmoff_kafka

  spring-boot:
    driver: bridge