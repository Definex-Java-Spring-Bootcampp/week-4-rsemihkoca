version: '3.8'

services:

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - spring-boot
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redis-ui:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: always
    networks:
        - spring-boot
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    networks:
      - rmoff_kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181


  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    networks:
      - rmoff_kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    command: sh -c "((sleep 15 && kafka-topics --create --topic kafka-log-topic --bootstrap-server localhost:29092)&) && /etc/confluent/docker/run"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - broker
    ports:
      - 8090:8080
    networks:
      - spring-boot
      - rmoff_kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./initialize-mongo.js:/docker-entrypoint-initdb.d/01_initialize-mongo.js:ro
    networks:
      - spring-boot


  kredinbizde-discovery:
    image: kredinbizde-discovery:latest
    build:
      context: ./kredinbizde-discovery-main
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - spring-boot
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      retries: 3
      timeout: 5s

  gateway-service-main:
    image: gateway-service-main:latest
    build:
      context: ./gateway-service-main
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - spring-boot
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka

  garanti-service-main:
    image: garanti-service-main:latest
    container_name: garanti-service-main
    build:
      context: ./garanti-service-main
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    networks:
      - spring-boot
      - rmoff_kafka
      - garanti-service-network
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - MYSQL_DB_HOST=mysql-garanti-service
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092


  akbank-service-main:
    image: akbank-service-main:latest
    container_name: akbank-service-main
    build:
      context: ./akbank-service-main
      dockerfile: Dockerfile
    ports:
      - "5556:5556"
    networks:
      - spring-boot
      - rmoff_kafka
      - akbank-service-network
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - MYSQL_DB_HOST=mysql-akbank-service
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092

  application-service-main:
    image: application-service-main:latest
    build:
      context: ./application-service-main
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - spring-boot
      - rmoff_kafka
      - application-service-network
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - MYSQL_DB_HOST=mysql-application-service

  user-service-main:
    image: user-service-main:latest
    build:
      context: ./user-service-main
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - spring-boot
      - rmoff_kafka
      - user-service-network
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - MYSQL_DB_HOST=mysql-user-service

  notification-service-main:
    image: notification-service-main:latest
    build:
      context: ./notification-service-main
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - spring-boot
      - rmoff_kafka
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379

  bank-service-main:
    image: bank-service-main:latest
    build:
      context: ./bank-service-main
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - spring-boot
      - rmoff_kafka
#      - bank-service-network
    depends_on:
      kredinbizde-discovery:
        condition: service_healthy
    environment:
      - EUREKA_SERVER_URL=http://kredinbizde-discovery:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379





  
  logconsumer-service-main:
    image: logconsumer-service-main
    build:
      context: ./logconsumer-service-main
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - spring-boot
      - rmoff_kafka
    depends_on:
      - mongodb
      - broker
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - MONGO_DB_HOST=mongodb

  mysql-application-service:
    image: mysql:8.0
    container_name: mysql-application-service
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: test
    ports:
      - "3305:3306"
    volumes:
      - mysql_appl_data:/var/lib/mysql
    networks:
      - application-service-network
#    entrypoint: [ "docker-entrypoint.sh", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci" ]

  mysql-user-service:
    image: mysql:8.0
    container_name: mysql-user-service
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: test
    ports:
      - "3306:3306"
    volumes:
      - mysql_user_data:/var/lib/mysql
    networks:
      - user-service-network
#    entrypoint: [ "docker-entrypoint.sh", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci" ]

  mysql-akbank-service:
    image: mysql:8.0
    container_name: mysql-akbank-service
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: test
    ports:
      - "3307:3306"
    volumes:
      - mysql_akbank_data:/var/lib/mysql
    networks:
      - akbank-service-network
#    entrypoint: [ "docker-entrypoint.sh", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci" ]

  mysql-garanti-service:
    image: mysql:8.0
    container_name: mysql-garanti-service
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: test
    ports:
      - "3308:3306"
    volumes:
      - mysql_garanti_data:/var/lib/mysql
    networks:
      - garanti-service-network
#    entrypoint: [ "docker-entrypoint.sh", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci" ]


volumes:
  mongodb_data:
  mysql_user_data:
  mysql_appl_data:
  mysql_akbank_data:
  mysql_garanti_data:
  redis_data:
  redis-insight:
networks:
  application-service-network:
    name: application-service-network
    driver: bridge
  user-service-network:
    name: user-service-network
    driver: bridge
  garanti-service-network:
    name: garanti-service-network
    driver: bridge
  akbank-service-network:
    name: akbank-service-network
    driver: bridge
  rmoff_kafka:
    name: rmoff_kafka
  spring-boot:
    driver: bridge
